#Springboot-jdk-8
name: product
on: [workflow_dispatch, push]
env:
  DB_USER: ${{ secrets.DB_USER }}
  DB_PASS: ${{ secrets.DB_PASS }}
  DB_HOST: ${{ secrets.DB_HOST }}
  DB_NAME: ${{ secrets.DB_NAME }}
  DB_PORT: ${{ secrets.DB_PORT }}
jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      checks: write
      security-events: write
      pull-requests: write
    steps:
    # Checking out the code
      - name: Checkout                            
        uses: actions/checkout@v4.1.1
      - name: echo
        run: |
          ls -la
          echo "passed"
          echo $APP_NAME
          echo ${{ github.repository }}
          echo "APP_NAME=$(basename ${{ github.repository }})" >> $GITHUB_ENV
          echo ${{ env.APP_NAME }}      
          
    #Scanning for secret detection
      - name: GitGuardian Shield Action
        env:
          GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}
        run: |
          pipx install ggshield
          ggshield secret scan ci
        continue-on-error: true


    # Setting up Java Environment
      - name: Setup Java JDK
        uses: actions/setup-java@v3.13.0
        with:
          distribution: 'temurin'
          java-version: '11'
      - name: package
        run: mvn clean package
      - name: file check
        run: ls -la target
      # - name: unit-test
      #   run: | 
      #     mvn test
      #     ls -la
      #     ls -la target
      #     cd target
      #     cd site
      #     ls -la jacoco
    # Vulnerability Check using Snyk Code
      # - name: Snyk
      #   uses: snyk/actions/maven@master
      #   env:
      #     SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      #   with:
      #     command: test
      #     args: |
      #       --severity-threshold=high
      #       --sarif-file-output=snyk.sarif
      # - name: Upload result to GitHub Code Scanning
      #   uses: github/codeql-action/upload-sarif@v2
      #   with:
      #     sarif_file: snyk.sarif
          
      # Publishing the test results to the Job Summary
      # - name: Publish Test Results
      #   uses: EnricoMi/publish-unit-test-result-action@v2.11.0
      #   with:
      #     comment_mode: off
      #     files: | 
      #       target/surefire-reports/TEST-*.xml
     # Analysing the Source Code using SonarCloud
      - name: Setting Git branch name
        uses: petehouston/github-actions-query-branch-name@v1.2
      - name: Analyze with SonarCloud
        env:
          BRANCH_NAME: ${{ steps.branch_extract.outputs.branch }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          echo $GIT_BRANCH_NAME
          #chmod +x ./mvnw
          mvn -B verify sonar:sonar -Dsonar.projectKey=super-info -Dsonar.organization=super-info -Dsonar.host.url=https://sonarcloud.io -Dsonar.coverage.jacoco.xmlReportPaths=${{ github.workspace }}/target/site/jacoco/jacoco.xml -Dsonar.branch.name=$GIT_BRANCH_NAME -Dsonar.qualitygate.wait=true
        continue-on-error: true

    # Docker Build
      - name: Docker Build
        run: |
          docker build -t ${{ env.APP_NAME }}:1.0.${{ github.run_number }} .
          #docker tag ${{ env.APP_NAME }}:1.0.${{ github.run_number }} ${{ vars.GOOGLE_PROJECT_ID }}/${{ env.APP_NAME }}:1.0.${{ github.run_number }}
          # docker login -u shmdus -p cannonbolt0204
          # docker push shmdus/crud-app:1.0.${{ github.run_number }}
    
    #Trivy Scanning 
      - name: Trivy scanning
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/master/contrib/install.sh | sh -s -- -b /usr/local/bin
          trivy image --format sarif -o report.sarif docker.io/${{ env.APP_NAME }}:1.0.${{ github.run_number }}
          # trivy image gcr.io/${{ vars.GOOGLE_PROJECT_ID }}/${{ env.APP_NAME }}:1.0.${{ github.run_number }}
        shell: bash
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v2
        with:
          # Path to SARIF file relative to the root of the repository
          sarif_file: reports.sarif
          # Optional category for the results
          # Used to differentiate multiple results for one commit
          category: Trivy-analysis    
             
    #  Pushing Image to PRIVATE ARFTIFACT REGISTRY
    #   - name: Google Artifact Registry Build & Push
    #     uses: piotr-krusinski/action-google-artifact-registry@v1.0
    #     with:
    #       google_project_id: ${{vars.GOOGLE_PROJECT_ID}}
    #       google_artifact_registry_region: us-central
    #       google_artifact_registry_hostname: gcr.io
    #       google_artifact_registry_name: github-ci
    #       service_account_key: ${{ secrets.GCLOUD_SERVICE_KEY }}
    #       dockerfile: ./
    #       image_name: $APP_NAME
    #       tag_list: 1.0.${{ github.run_number }}
   
    # Docker Push
    
      - name: Push Docker GCR
        uses: RaccoonDev/push-docker-gcr@v1
        env:
          GCLOUD_SERVICE_KEY: ${{ secrets.GCLOUD_SERVICE_KEY }}
          GOOGLE_PROJECT_ID: ${{ vars.GOOGLE_PROJECT_ID }}
        with:
        # Google Container Registry Host
          image_name: ${{ env.APP_NAME }}
          image_tag: 1.0.${{ github.run_number }}
    #Update Manifest File
      - name: Checkout
        uses: actions/checkout@v4.1.1
        with:
          repository: 'super-info/k8s-manifest'
          token: ${{ secrets.GIT_TOKEN }}
      - name: Update image
        env:
          PAT: ${{ secrets.GIT_TOKEN }}
        run: |
          ls -la
          #git clone https://${{ secrets.GIT_TOKEN }}@github.com/super-info/k8s-manifest.git
          git config --global user.email "${{ secrets.GIT_MAIL }}"
          git config --global user.name "$GITHUB_REPOSITORY_OWNER"
          #git remote add origin https://$PAT@github.com/super-info/k8s-manifest.git
          cd ${{ env.APP_NAME }}
          sed -i "s|gcr.io/${{ vars.GOOGLE_PROJECT_ID }}.*| gcr.io/${{ vars.GOOGLE_PROJECT_ID }}/${{ env.APP_NAME }}:1.0.${{ github.run_number }}|g" deployment.yaml
          cat deployment.yaml
          git add .
          git commit -m "image update"
          git push -uf origin
          

          
    #  - name: JaCoCo Report
    #    uses: Madrapps/jacoco-report@v1.6.1
    #    with:
    #      paths: target/site/jacoco/jacoco.xml
    #      token: ${{secrets.TOKEN_REPO}}
    #      min-coverage-overall: 60
      
